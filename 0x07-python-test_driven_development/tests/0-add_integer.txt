# 0-add_integer.txt
===============================
 How to Use 0-add_integer.py
===============================

This module is very simple, since it only has one function called
``add_integer()``.

Numbers
=======

``add_integer()`` returns the sum of its arguments.

::
    >>> add_integer = __import__("0-add_integer").add_integer
    >>> add_integer(1, 2)
    3
    >>> add_integer(100, -2)
    98
    >>> add_integer(2)
    100
    >>> add_integer(100.3, -2)
    98
    >>> add_integer(100.3, 100.6)
    200
    >>> import sys
    >>> add_integer(sys.float_info.max, sys.float_info.max)
    359538626972463141629054847463408713596141135051689993197834953606314521560057077521179117265533756343080917907028764928468642653778928365536935093407075033972099821153102564152490980180778657888151737016910267884609166473806445896331617118664246696549595652408289446337476354361838599762500808052368249716736

Posible exceptions.

::
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    	      ...
    TypeError: b must be an integer
    >>> add_integer(None)
    Traceback (most recent call last):
    	      ...
    TypeError: a must be an integer
    >>> add_integer((2, 3))
    Traceback (most recent call last):
    	      ...
    TypeError: a must be an integer
    >>> add_integer([2, 3])
    Traceback (most recent call last):
    	      ...
    TypeError: a must be an integer
    >>> add_integer(None, 3)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer
    >>> add_integer(, 3)
    Traceback (most recent call last):
              ...
    SyntaxError: invalid syntax
    >>> add_integer(1, float("nan"))
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer
    >>> add_integer(1, float('abc'))
    Traceback (most recent call last):
              ...
    ValueError: could not convert string to float: 'abc'
